import os
import json
import subprocess
import re
import requests
import time
from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler
from dotenv import load_dotenv
from openai import OpenAI
from globalping_hybrid_client import GlobalpingHybridClient, hybrid_ping, hybrid_http
from globalping_with_token import GlobalpingTokenClient, token_ping, token_http, token_dns, token_traceroute, token_mtr, comprehensive_token_test

load_dotenv()

SLACK_APP_TOKEN = os.getenv("SLACK_APP_TOKEN")
SLACK_BOT_TOKEN = os.getenv("SLACK_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GLOBALPING_API_TOKEN = os.getenv("GLOBALPING_API_TOKEN")  # –¢–æ–∫–µ–Ω –∏–∑ –ø–∞–Ω–µ–ª–∏ Globalping

app = App(token=SLACK_BOT_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –ø–æ —Ç–∞–π–º–∞—É—Ç—É
def run_command(command):
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if command.strip().startswith("tracert"):
        parts = command.strip().split()
        target = parts[-1]
        # –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π tracert: –º–∞–∫—Å–∏–º—É–º 8 –ø—Ä—ã–∂–∫–æ–≤, –±—ã—Å—Ç—Ä—ã–π —Ç–∞–π–º–∞—É—Ç
        command = f"tracert -d -h 8 -w 500 {target}"
        timeout = 8  # 8 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
    elif command.strip().startswith("pathping"):
        timeout = 15  # 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è pathping
    elif command.strip().startswith("telnet"):
        timeout = 3  # 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è telnet
    else:
        timeout = 5  # 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥

    try:
        proc = subprocess.Popen(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            shell=True,
            encoding='cp866',
            errors='replace'
        )
        try:
            stdout, stderr = proc.communicate(timeout=timeout)
        except subprocess.TimeoutExpired:
            proc.kill()
            if command.strip().startswith("tracert"):
                return "‚è±Ô∏è Tracert –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É (8 —Å–µ–∫) - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π"
            elif command.strip().startswith("telnet"):
                return "‚è±Ô∏è Telnet —Ç–∞–π–º–∞—É—Ç - –ø–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            else:
                return f"‚è±Ô∏è –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É ({timeout} —Å–µ–∫)"

        return stdout if proc.returncode == 0 else stderr

    except FileNotFoundError:
        return f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {command.split()[0]}"

# Globalping Smart –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (Token ‚Üí MCP ‚Üí REST API fallback)
def globalping_hybrid_check(target: str, test_type: str) -> str:
    """–ì–∏–±—Ä–∏–¥–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Ç–æ–∫–µ–Ω–∞"""
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: API Token ‚Üí Direct REST API
    api_token = os.getenv("GLOBALPING_API_TOKEN")
    if api_token:
        print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º API —Ç–æ–∫–µ–Ω –¥–ª—è {test_type} —Ç–µ—Å—Ç–∞ {target}")
        try:
            if test_type == "ping":
                result = token_ping(api_token, target)
            elif test_type == "http":
                result = token_http(api_token, target)
            elif test_type == "dns":
                result = token_dns(api_token, target)
            elif test_type == "traceroute":
                result = token_traceroute(api_token, target)
            elif test_type == "mtr":
                result = token_mtr(api_token, target)
            else:
                result = f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞: {test_type}"
            
            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å—Ä–∞–±–æ—Ç–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if "‚úÖ" in result:
                return result
            else:
                print(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {result[:50]}, –ø—Ä–æ–±—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥...")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞: {e}, –ø—Ä–æ–±—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥...")
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: MCP Server (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    try:
        if test_type == "ping":
            return hybrid_ping(target)
        elif test_type == "http":
            return hybrid_http(target)
        else:
            print(f"‚ö†Ô∏è MCP –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç {test_type}, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ REST API...")
            # Fallback to public REST API for unsupported tests
            if test_type == "dns":
                return public_dns_check(target)
            elif test_type == "traceroute":
                return public_traceroute_check(target)
            elif test_type == "mtr":
                return public_mtr_check(target)
            else:
                return f"‚ùå –¢–∏–ø —Ç–µ—Å—Ç–∞ {test_type} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
    except Exception as e:
        print(f"‚ö†Ô∏è MCP –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ REST API...")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: Public REST API fallback
        try:
            if test_type == "ping":
                return public_ping_check(target)
            elif test_type == "http":
                return public_http_check(target)
            elif test_type == "dns":
                return public_dns_check(target)
            elif test_type == "traceroute":
                return public_traceroute_check(target)
            elif test_type == "mtr":
                return public_mtr_check(target)
            else:
                return f"‚ùå –¢–∏–ø —Ç–µ—Å—Ç–∞ {test_type} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
        except Exception as public_e:
            return f"‚ùå –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: MCP({e}), Public({public_e})"

def public_dns_check(target: str) -> str:
    """–ü—É–±–ª–∏—á–Ω–∞—è DNS –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ REST API"""
    try:
        # –û—á–∏—â–∞–µ–º URL –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        clean_target = target
        if target.startswith(("http://", "https://")):
            clean_target = target.replace("https://", "").replace("http://", "").split("/")[0]
        
        payload = {
            "type": "dns",
            "target": clean_target,
            "locations": [{"magic": "EU"}],
            "limit": 2,
            "measurementOptions": {"query": {"type": "A"}}
        }
        
        response = requests.post("https://api.globalping.io/v1/measurements", json=payload, timeout=10)
        if response.status_code != 202:
            return f"‚ùå **–û—à–∏–±–∫–∞ dns**: HTTP {response.status_code}"
        
        measurement_id = response.json().get("id")
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        for _ in range(15):
            time.sleep(1)
            result_response = requests.get(f"https://api.globalping.io/v1/measurements/{measurement_id}", timeout=10)
            if result_response.status_code == 200:
                data = result_response.json()
                if data.get("status") == "finished":
                    results = []
                    for result in data.get("results", []):
                        probe = result.get("probe", {})
                        location = f"{probe.get('city', 'Unknown')}, {probe.get('country', 'Unknown')}"
                        dns_result = result.get("result", {})
                        answers = dns_result.get("answers", [])
                        if answers:
                            ip = answers[0].get("value", "N/A")
                            results.append(f"üìç {location}: {ip}")
                    return f"üåç **Globalping DNS** –¥–ª—è `{clean_target}`:\n" + "\n".join(results)
        return "‚ùå **–û—à–∏–±–∫–∞ dns**: Timeout"
    except Exception as e:
        return f"‚ùå **–û—à–∏–±–∫–∞ dns**: {str(e)}"

def public_traceroute_check(target: str) -> str:
    """–ü—É–±–ª–∏—á–Ω–∞—è traceroute –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ REST API"""
    try:
        # –û—á–∏—â–∞–µ–º URL –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        clean_target = target
        if target.startswith(("http://", "https://")):
            clean_target = target.replace("https://", "").replace("http://", "").split("/")[0]
        
        payload = {
            "type": "traceroute",
            "target": clean_target,
            "locations": [{"magic": "EU"}],
            "limit": 2
        }
        
        response = requests.post("https://api.globalping.io/v1/measurements", json=payload, timeout=10)
        if response.status_code != 202:
            return f"‚ùå **–û—à–∏–±–∫–∞ traceroute**: HTTP {response.status_code}"
        
        measurement_id = response.json().get("id")
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        for _ in range(15):
            time.sleep(1)
            result_response = requests.get(f"https://api.globalping.io/v1/measurements/{measurement_id}", timeout=10)
            if result_response.status_code == 200:
                data = result_response.json()
                if data.get("status") == "finished":
                    results = []
                    for result in data.get("results", []):
                        probe = result.get("probe", {})
                        location = f"{probe.get('city', 'Unknown')}, {probe.get('country', 'Unknown')}"
                        trace_result = result.get("result", {})
                        hops = trace_result.get("hops", [])
                        hop_count = len(hops)
                        last_hop = hops[-1] if hops else {}
                        last_time = last_hop.get("timings", [{}])[-1].get("rtt", "N/A") if last_hop else "N/A"
                        results.append(f"üìç {location}: {hop_count} –ø—Ä—ã–∂–∫–æ–≤, –ø–æ—Å–ª–µ–¥–Ω–∏–π {last_time}ms")
                    return f"üåç **Globalping TRACEROUTE** –¥–ª—è `{clean_target}`:\n" + "\n".join(results)
        return "‚ùå **–û—à–∏–±–∫–∞ traceroute**: Timeout"
    except Exception as e:
        return f"‚ùå **–û—à–∏–±–∫–∞ traceroute**: {str(e)}"

def public_ping_check(target: str) -> str:
    """–ü—É–±–ª–∏—á–Ω–∞—è ping –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ REST API"""
    try:
        # –û—á–∏—â–∞–µ–º URL –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        clean_target = target
        if target.startswith(("http://", "https://")):
            clean_target = target.replace("https://", "").replace("http://", "").split("/")[0]
        
        payload = {
            "type": "ping",
            "target": clean_target,
            "locations": [{"magic": "EU"}],
            "limit": 2,
            "measurementOptions": {"packets": 3}
        }
        
        response = requests.post("https://api.globalping.io/v1/measurements", json=payload, timeout=10)
        if response.status_code != 202:
            return f"‚ùå **–û—à–∏–±–∫–∞ ping**: HTTP {response.status_code}"
        
        measurement_id = response.json().get("id")
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        for _ in range(15):
            time.sleep(1)
            result_response = requests.get(f"https://api.globalping.io/v1/measurements/{measurement_id}", timeout=10)
            if result_response.status_code == 200:
                data = result_response.json()
                if data.get("status") == "finished":
                    results = []
                    for result in data.get("results", []):
                        probe = result.get("probe", {})
                        location = f"{probe.get('city', 'Unknown')}, {probe.get('country', 'Unknown')}"
                        stats = result.get("result", {}).get("stats", {})
                        avg_time = stats.get("avg", "N/A")
                        packet_loss = stats.get("loss", "N/A")
                        results.append(f"üìç {location}: {avg_time}ms (–ø–æ—Ç–µ—Ä—å: {packet_loss}%)")
                    return f"üåç **Globalping PING** –¥–ª—è `{clean_target}`:\n" + "\n".join(results)
        return "‚ùå **–û—à–∏–±–∫–∞ ping**: Timeout"
    except Exception as e:
        return f"‚ùå **–û—à–∏–±–∫–∞ ping**: {str(e)}"

def public_http_check(target: str) -> str:
    """–ü—É–±–ª–∏—á–Ω–∞—è HTTP –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ REST API"""
    try:
        # –û—á–∏—â–∞–µ–º URL –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–ª—è HTTP —Ç–µ—Å—Ç–æ–≤
        clean_target = target
        if target.startswith(("http://", "https://")):
            clean_target = target.replace("https://", "").replace("http://", "").split("/")[0]
        
        payload = {
            "type": "http",
            "target": clean_target,
            "locations": [{"magic": "EU"}],
            "limit": 2
        }
        
        response = requests.post("https://api.globalping.io/v1/measurements", json=payload, timeout=10)
        if response.status_code != 202:
            return f"‚ùå **–û—à–∏–±–∫–∞ http**: HTTP {response.status_code}"
        
        measurement_id = response.json().get("id")
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        for _ in range(15):
            time.sleep(1)
            result_response = requests.get(f"https://api.globalping.io/v1/measurements/{measurement_id}", timeout=10)
            if result_response.status_code == 200:
                data = result_response.json()
                if data.get("status") == "finished":
                    results = []
                    for result in data.get("results", []):
                        probe = result.get("probe", {})
                        location = f"{probe.get('city', 'Unknown')}, {probe.get('country', 'Unknown')}"
                        http_result = result.get("result", {})
                        status = http_result.get("status", "N/A")
                        total_time = http_result.get("timings", {}).get("total", "N/A")
                        results.append(f"üìç {location}: HTTP {status} ({total_time}ms)")
                    return f"üåç **Globalping HTTP** –¥–ª—è `{clean_target}`:\n" + "\n".join(results)
        return "‚ùå **–û—à–∏–±–∫–∞ http**: Timeout"
    except Exception as e:
        return f"‚ùå **–û—à–∏–±–∫–∞ http**: {str(e)}"

def public_mtr_check(target: str) -> str:
    """–ü—É–±–ª–∏—á–Ω–∞—è mtr –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ REST API"""
    try:
        # –û—á–∏—â–∞–µ–º URL –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        clean_target = target
        if target.startswith(("http://", "https://")):
            clean_target = target.replace("https://", "").replace("http://", "").split("/")[0]
        
        payload = {
            "type": "mtr",
            "target": clean_target,
            "locations": [{"magic": "EU"}],
            "limit": 2
        }
        
        response = requests.post("https://api.globalping.io/v1/measurements", json=payload, timeout=10)
        if response.status_code != 202:
            return f"‚ùå **–û—à–∏–±–∫–∞ mtr**: HTTP {response.status_code}"
        
        measurement_id = response.json().get("id")
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        for _ in range(15):
            time.sleep(1)
            result_response = requests.get(f"https://api.globalping.io/v1/measurements/{measurement_id}", timeout=10)
            if result_response.status_code == 200:
                data = result_response.json()
                if data.get("status") == "finished":
                    results = []
                    for result in data.get("results", []):
                        probe = result.get("probe", {})
                        location = f"{probe.get('city', 'Unknown')}, {probe.get('country', 'Unknown')}"
                        mtr_result = result.get("result", {})
                        results.append(f"üìç {location}: {mtr_result.get('status', 'N/A')}")
                    return f"üåç **Globalping MTR** –¥–ª—è `{clean_target}`:\n" + "\n".join(results)
        return "‚ùå **–û—à–∏–±–∫–∞ mtr**: Timeout"
    except Exception as e:
        return f"‚ùå **–û—à–∏–±–∫–∞ mtr**: {str(e)}"

def format_summary(summary):
    """–£–ª—É—á—à–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ"""
    if not summary or len(summary.strip()) < 10:
        return "üìù _–†–µ–∑—é–º–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ_"
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã
    formatted = summary.strip()
    
    # –ó–∞–º–µ–Ω—è–µ–º markdown –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ —ç–º–æ–¥–∑–∏
    formatted = formatted.replace("### –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ–∑—é–º–µ", "")
    formatted = formatted.replace("### ", "üî∏ **")
    formatted = formatted.replace("**:", ":**")
    
    # –£–ª—É—á—à–∞–µ–º —Å–ø–∏—Å–∫–∏
    formatted = formatted.replace("1. **", "1Ô∏è‚É£ **")
    formatted = formatted.replace("2. **", "2Ô∏è‚É£ **")
    formatted = formatted.replace("3. **", "3Ô∏è‚É£ **")
    formatted = formatted.replace("4. **", "4Ô∏è‚É£ **")
    formatted = formatted.replace("5. **", "5Ô∏è‚É£ **")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–æ 1500 —Å–∏–º–≤–æ–ª–æ–≤
    # if len(formatted) > 1500:
    #    formatted = formatted[:1500] + "...\n\n‚ö†Ô∏è _–†–µ–∑—é–º–µ —Å–æ–∫—Ä–∞—â–µ–Ω–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞_"
    
    return formatted

# –§—É–Ω–∫—Ü–∏—è –æ–±—â–µ–Ω–∏—è —Å OpenAI API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑ –∏ –∫–æ–º–∞–Ω–¥
def ai_diagnose_issue(target):
    prompt = f"""
    –°–∞–π—Ç –∏–ª–∏ —Ä–µ—Å—É—Ä—Å '{target}' —É–ø–∞–ª –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ.

    –ü—Ä–µ–¥–ª–æ–∂–∏ –ö–†–ê–¢–ö–ò–ï –≥–∏–ø–æ—Ç–µ–∑—ã –ø—Ä–∏—á–∏–Ω –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å–µ—Ç–µ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –î–õ–Ø WINDOWS –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ç–∏—Ö –≥–∏–ø–æ—Ç–µ–∑.
    –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: curl, nslookup, ping.

    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, –ø—Ä–µ–¥–ª–æ–∂–∏ Globalping —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Å—É—Ä—Å–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –º–∏—Ä–∞.
    –î–æ—Å—Ç—É–ø–Ω—ã–µ Globalping –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ping, http, traceroute, dns, mtr.

    –í–ê–ñ–ù–û: –ö–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ë–ï–ó –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ http:// –¥–ª—è ping, nslookup, tracert!

    –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
    –ì–∏–ø–æ—Ç–µ–∑–∞: <–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ>  
    –ö–æ–º–∞–Ω–¥–∞: <–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏>  
    MCP: <—Ç–∏–ø_—Ç–µ—Å—Ç–∞>
    """

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=500,  # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª—è –±–æ–ª–µ–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        temperature=0.1
    )

    return response.choices[0].message.content.strip()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
def summarize_results(diagnostic, results):
    summary_prompt = f"""
    –î–∞–Ω—ã –≥–∏–ø–æ—Ç–µ–∑—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏:
    –ì–∏–ø–æ—Ç–µ–∑—ã –∏ –∫–æ–º–∞–Ω–¥—ã:
    {diagnostic}

    –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥:
    {results}

    –ö—Ä–∞—Ç–∫–æ —Ä–µ–∑—é–º–∏—Ä—É–π, —É–∫–∞–∂–∏ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø–∞–¥–µ–Ω–∏—è —Å–∞–π—Ç–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Ö —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é.
    """

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": summary_prompt}],
        max_tokens=2000,
        temperature=0.1
    )

    return response.choices[0].message.content.strip()

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–ª–µ–π –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è Slack
def extract_targets(event):
    targets = []

    text = event.get('text', '')
    targets += re.findall(r"(\b(?:\d{1,3}\.){3}\d{1,3}\b|https?://[\w.-]+|\b[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b)", text)

    for file in event.get('files', []):
        plain_text = file.get('plain_text', '')
        targets += re.findall(r"(\b(?:\d{1,3}\.){3}\d{1,3}\b|https?://[\w.-]+|\b[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b)", plain_text)

    for attachment in event.get('attachments', []):
        for field in attachment.get('fields', []):
            field_value = field.get('value', '')
            targets += re.findall(r"(\b(?:\d{1,3}\.){3}\d{1,3}\b|https?://[\w.-]+|\b[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b)", field_value)

    return targets

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö Slack-—Å–æ–æ–±—â–µ–Ω–∏–π
@app.event("message")
def handle_message(event, say):
    bot_user_id = app.client.auth_test()["user_id"]
    if event.get('user') == bot_user_id:
        return

    targets = extract_targets(event)
    if not targets:
        return

    target = targets[0]
    thread_ts = event.get('ts')

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å Globalping –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    token_status = "üîë API Token" if GLOBALPING_API_TOKEN else "üåê Public Access"
    say(f"üîç *–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ—Å—É—Ä—Å–∞:* `{target}`\n‚ö° _Globalping: {token_status} | –ó–∞–ø—É—Å–∫–∞—é –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É..._", thread_ts=thread_ts)
    
    # –ß–ê–°–¢–¨ 1: Globalping —Ç–µ—Å—Ç—ã (4 —Ç–æ—á–∫–∏, –≤–∫–ª—é—á–∞—è 2 –≤ –†–§)
    globalping_results = []
    globalping_tests = ["ping", "http", "dns", "traceroute", "mtr"]
    
    say(f"üåç **–ó–∞–ø—É—Å–∫–∞—é {len(globalping_tests)} Globalping —Ç–µ—Å—Ç–æ–≤** –∏–∑ 4 —Ç–æ—á–µ–∫ (–≤–∫–ª—é—á–∞—è –†–§)...", thread_ts=thread_ts)
    
    for test_type in globalping_tests:
        result = globalping_hybrid_check_extended(target, test_type)
        globalping_results.append(f"**üåç {test_type.upper()}:**\n{result}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Globalping
    if globalping_results:
        globalping_text = "üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫:**\n" + "\n\n".join(globalping_results)
        say(globalping_text, thread_ts=thread_ts)

    # –ß–ê–°–¢–¨ 2: –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä)
    local_commands = [
        f"ping -n 4 {extract_domain(target)}",
        f"nslookup {extract_domain(target)}",
        f"curl -I -m 10 {target}",
        f"tracert -d -h 10 {extract_domain(target)}",
        f"nslookup -type=MX {extract_domain(target)}"
    ]
    
    say("üíª **–í—ã–ø–æ–ª–Ω—è—é –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã...**", thread_ts=thread_ts)
    
    local_results = []
    for command in local_commands:
        output = run_command(command)
        local_results.append(f"**üíª** `{command}`:\n```{output}```")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if local_results:
        local_text = "üíª **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:**\n" + "\n\n".join(local_results)
        say(local_text, thread_ts=thread_ts)

    # –ß–ê–°–¢–¨ 3: PathPing —Å –ø–æ–ª–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –¥–ª—è LLM (Windows –∞–Ω–∞–ª–æ–≥ MTR)
    pathping_command = f"pathping -n -q 5 -h 8 {extract_domain(target)}"
    say("üî¨ **–ó–∞–ø—É—Å–∫–∞—é PathPing –∞–Ω–∞–ª–∏–∑ (Windows MTR)...**", thread_ts=thread_ts)
    
    pathping_output = run_command(pathping_command)
    pathping_result = f"**üî¨ PathPing –∞–Ω–∞–ª–∏–∑** `{pathping_command}`:\n```{pathping_output}```"
    say(pathping_result, thread_ts=thread_ts)

    # –ß–ê–°–¢–¨ 4: LLM –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    all_results = globalping_results + local_results + [pathping_result]
    analysis = analyze_all_results(target, "\n".join(all_results))
    
    formatted_analysis = format_summary(analysis)
    say(f"ü§ñ **–ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑:**\n{formatted_analysis}", thread_ts=thread_ts)

def extract_domain(target):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å—Ç—ã–π –¥–æ–º–µ–Ω –∏–∑ URL"""
    return target.replace("https://", "").replace("http://", "").split("/")[0]

def globalping_hybrid_check_extended(target: str, test_type: str) -> str:
    """–ì–∏–±—Ä–∏–¥–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å 4 —Ç–æ—á–∫–∞–º–∏, –≤–∫–ª—é—á–∞—è 2 –≤ –†–§"""
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: API Token ‚Üí Direct REST API
    api_token = os.getenv("GLOBALPING_API_TOKEN")
    if api_token:
        print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º API —Ç–æ–∫–µ–Ω –¥–ª—è {test_type} —Ç–µ—Å—Ç–∞ {target}")
        try:
            if test_type == "ping":
                result = token_ping_extended(api_token, target)
            elif test_type == "http":
                result = token_http_extended(api_token, target)
            elif test_type == "dns":
                result = token_dns_extended(api_token, target)
            elif test_type == "traceroute":
                result = token_traceroute_extended(api_token, target)
            elif test_type == "mtr":
                result = token_mtr_extended(api_token, target)
            else:
                result = f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞: {test_type}"
            
            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å—Ä–∞–±–æ—Ç–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if "‚úÖ" in result:
                return result
            else:
                print(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {result[:50]}, –ø—Ä–æ–±—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API...")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞: {e}, –ø—Ä–æ–±—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API...")
    
    # Fallback: Public REST API —Å 4 —Ç–æ—á–∫–∞–º–∏
    try:
        if test_type == "ping":
            return public_ping_check_extended(target)
        elif test_type == "http":
            return public_http_check_extended(target)
        elif test_type == "dns":
            return public_dns_check_extended(target)
        elif test_type == "traceroute":
            return public_traceroute_check_extended(target)
        elif test_type == "mtr":
            return public_mtr_check_extended(target)
        else:
            return f"‚ùå –¢–∏–ø —Ç–µ—Å—Ç–∞ {test_type} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
    except Exception as e:
        return f"‚ùå –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}"

def analyze_all_results(target: str, all_results: str) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é LLM"""
    prompt = f"""
    –ü—Ä–æ–≤–µ–¥–µ–Ω –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ—Å—É—Ä—Å–∞ '{target}'. 
    
    –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:
    {all_results}
    
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ:
    1. –°—Ç–∞—Ç—É—Å —Ä–µ—Å—É—Ä—Å–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç/–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç/–ø—Ä–æ–±–ª–µ–º—ã)
    2. –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é
    
    –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –∏ –ª–∞–∫–æ–Ω–∏—á–µ–Ω.
    """

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=1000,
        temperature=0.1
    )

    return response.choices[0].message.content.strip()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å 4 —Ç–æ—á–∫–∞–º–∏ (–≤–∫–ª—é—á–∞—è –†–§)
def token_ping_extended(api_token: str, target: str) -> str:
    client = GlobalpingTokenClient(api_token)
    result = client.ping(extract_domain(target), "RU,EU,NA,AS", limit=4)
    if result["success"]:
        return f"‚úÖ {result['result']}"
    else:
        return f"‚ùå **–û—à–∏–±–∫–∞ ping**: {result['error']}"

def token_http_extended(api_token: str, target: str) -> str:
    client = GlobalpingTokenClient(api_token)
    result = client.http(extract_domain(target), "RU,EU,NA,AS", limit=4)
    if result["success"]:
        return f"‚úÖ {result['result']}"
    else:
        return f"‚ùå **–û—à–∏–±–∫–∞ http**: {result['error']}"

def token_dns_extended(api_token: str, target: str) -> str:
    client = GlobalpingTokenClient(api_token)
    result = client.dns(extract_domain(target), "RU,EU,NA,AS", limit=4)
    if result["success"]:
        return f"‚úÖ {result['result']}"
    else:
        return f"‚ùå **–û—à–∏–±–∫–∞ dns**: {result['error']}"

def token_traceroute_extended(api_token: str, target: str) -> str:
    client = GlobalpingTokenClient(api_token)
    result = client.traceroute(extract_domain(target), "RU,EU,NA,AS", limit=4)
    if result["success"]:
        return f"‚úÖ {result['result']}"
    else:
        return f"‚ùå **–û—à–∏–±–∫–∞ traceroute**: {result['error']}"

def token_mtr_extended(api_token: str, target: str) -> str:
    client = GlobalpingTokenClient(api_token)
    result = client.mtr(extract_domain(target), "RU,EU,NA,AS", limit=4)
    if result["success"]:
        return f"‚úÖ {result['result']}"
    else:
        return f"‚ùå **–û—à–∏–±–∫–∞ mtr**: {result['error']}"

# –ü—É–±–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
def public_ping_check_extended(target: str) -> str:
    return execute_public_test_extended(extract_domain(target), "ping")

def public_http_check_extended(target: str) -> str:
    return execute_public_test_extended(extract_domain(target), "http")

def public_dns_check_extended(target: str) -> str:
    return execute_public_test_extended(extract_domain(target), "dns")

def public_traceroute_check_extended(target: str) -> str:
    return execute_public_test_extended(extract_domain(target), "traceroute")

def public_mtr_check_extended(target: str) -> str:
    return execute_public_test_extended(extract_domain(target), "mtr")

def execute_public_test_extended(target: str, test_type: str) -> str:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API —Å 4 —Ç–æ—á–∫–∞–º–∏"""
    try:
        payload = {
            "type": test_type,
            "target": target,
            "locations": [{"magic": "RU"}, {"magic": "EU"}, {"magic": "NA"}, {"magic": "AS"}],
            "limit": 4
        }
        
        if test_type == "ping":
            payload["measurementOptions"] = {"packets": 4}
        elif test_type == "dns":
            payload["measurementOptions"] = {"query": {"type": "A"}}
        
        response = requests.post("https://api.globalping.io/v1/measurements", json=payload, timeout=15)
        if response.status_code != 202:
            return f"‚ùå **–û—à–∏–±–∫–∞ {test_type}**: HTTP {response.status_code}"
        
        measurement_id = response.json().get("id")
        
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–æ–ª—å—à–µ –¥–ª—è 4 —Ç–æ—á–µ–∫)
        for _ in range(25):
            time.sleep(1)
            result_response = requests.get(f"https://api.globalping.io/v1/measurements/{measurement_id}", timeout=10)
            if result_response.status_code == 200:
                data = result_response.json()
                if data.get("status") == "finished":
                    return format_extended_results(data, test_type, target)
        
        return f"‚ùå **–û—à–∏–±–∫–∞ {test_type}**: Timeout"
    except Exception as e:
        return f"‚ùå **–û—à–∏–±–∫–∞ {test_type}**: {str(e)}"

def format_extended_results(result_data: dict, test_type: str, target: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ —Å 4 —Ç–æ—á–µ–∫"""
    results = []
    
    for result in result_data.get("results", []):
        probe = result.get("probe", {})
        country = probe.get("country", "Unknown")
        city = probe.get("city", "Unknown")
        location = f"{city}, {country}"
        
        if test_type == "ping":
            stats = result.get("result", {}).get("stats", {})
            avg_time = stats.get("avg", "N/A")
            packet_loss = stats.get("loss", "N/A")
            results.append(f"üìç {location}: {avg_time}ms (–ø–æ—Ç–µ—Ä—å: {packet_loss}%)")
        elif test_type == "http":
            http_result = result.get("result", {})
            status = http_result.get("status", "N/A")
            total_time = http_result.get("timings", {}).get("total", "N/A")
            results.append(f"üìç {location}: HTTP {status} ({total_time}ms)")
        elif test_type == "dns":
            dns_result = result.get("result", {})
            answers = dns_result.get("answers", [])
            if answers:
                ip = answers[0].get("value", "N/A")
                results.append(f"üìç {location}: {ip}")
            else:
                results.append(f"üìç {location}: DNS timeout")
        elif test_type in ["traceroute", "mtr"]:
            trace_result = result.get("result", {})
            hops = trace_result.get("hops", [])
            hop_count = len(hops)
            if hops:
                last_hop = hops[-1]
                if test_type == "mtr":
                    stats = last_hop.get("stats", {})
                    avg_time = stats.get("avg", "N/A")
                    results.append(f"üìç {location}: {hop_count} –ø—Ä—ã–∂–∫–æ–≤, {avg_time}ms")
                else:
                    timings = last_hop.get("timings", [{}])
                    last_time = timings[-1].get("rtt", "N/A") if timings else "N/A"
                    results.append(f"üìç {location}: {hop_count} –ø—Ä—ã–∂–∫–æ–≤, {last_time}ms")
            else:
                results.append(f"üìç {location}: –ú–∞—Ä—à—Ä—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    return f"üåç **{test_type.upper()}** –¥–ª—è `{target}`:\n" + "\n".join(results)

if __name__ == "__main__":
    handler = SocketModeHandler(app, SLACK_APP_TOKEN)
    handler.start()
