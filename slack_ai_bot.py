import os
import json
import subprocess
import re
import requests
import time
from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler
from dotenv import load_dotenv
from openai import OpenAI
from globalping_hybrid_client import GlobalpingHybridClient, hybrid_ping, hybrid_http
from globalping_with_token import GlobalpingTokenClient, token_ping, token_http, token_dns, token_traceroute, comprehensive_token_test

load_dotenv()

SLACK_APP_TOKEN = os.getenv("SLACK_APP_TOKEN")
SLACK_BOT_TOKEN = os.getenv("SLACK_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GLOBALPING_API_TOKEN = os.getenv("GLOBALPING_API_TOKEN")  # –¢–æ–∫–µ–Ω –∏–∑ –ø–∞–Ω–µ–ª–∏ Globalping

app = App(token=SLACK_BOT_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –ø–æ —Ç–∞–π–º–∞—É—Ç—É
def run_command(command):
    if command.strip().startswith("tracert"):
        parts = command.strip().split()
        target = parts[-1]
        command = f"tracert -d -h 5 -w 1000 {target}"

    try:
        proc = subprocess.Popen(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            shell=True,
            encoding='cp866',
            errors='replace'
        )
        try:
            stdout, stderr = proc.communicate(timeout=10)
        except subprocess.TimeoutExpired:
            proc.kill()
            return "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞."

        return stdout if proc.returncode == 0 else stderr

    except FileNotFoundError:
        return f"–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {command.split()[0]}"

# Globalping Smart –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (Token ‚Üí MCP ‚Üí REST API fallback)
def globalping_hybrid_check(target: str, test_type: str) -> str:
    """–ì–∏–±—Ä–∏–¥–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Ç–æ–∫–µ–Ω–∞"""
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: API Token ‚Üí Direct REST API
    api_token = os.getenv("GLOBALPING_API_TOKEN")
    if api_token:
        print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º API —Ç–æ–∫–µ–Ω –¥–ª—è {test_type} —Ç–µ—Å—Ç–∞ {target}")
        try:
            if test_type == "ping":
                result = token_ping(api_token, target)
            elif test_type == "http":
                result = token_http(api_token, target)
            elif test_type == "dns":
                result = token_dns(api_token, target)
            elif test_type == "traceroute":
                result = token_traceroute(api_token, target)
            else:
                result = f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞: {test_type}"
            
            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å—Ä–∞–±–æ—Ç–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if "‚úÖ" in result:
                return result
            else:
                print(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {result[:50]}, –ø—Ä–æ–±—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥...")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞: {e}, –ø—Ä–æ–±—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥...")
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: MCP Server (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    try:
        if test_type == "ping":
            return hybrid_ping(target)
        elif test_type == "http":
            return hybrid_http(target)
        else:
            print(f"‚ö†Ô∏è MCP –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç {test_type}, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ REST API...")
            # Fallback to public REST API for unsupported tests
            if test_type == "dns":
                return public_dns_check(target)
            elif test_type == "traceroute":
                return public_traceroute_check(target)
            else:
                return f"‚ùå –¢–∏–ø —Ç–µ—Å—Ç–∞ {test_type} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
    except Exception as e:
        print(f"‚ö†Ô∏è MCP –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ REST API...")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: Public REST API fallback
        try:
            if test_type == "ping":
                return public_ping_check(target)
            elif test_type == "http":
                return public_http_check(target)
            elif test_type == "dns":
                return public_dns_check(target)
            elif test_type == "traceroute":
                return public_traceroute_check(target)
            else:
                return f"‚ùå –¢–∏–ø —Ç–µ—Å—Ç–∞ {test_type} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
        except Exception as public_e:
            return f"‚ùå –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: MCP({e}), Public({public_e})"

def public_dns_check(target: str) -> str:
    """–ü—É–±–ª–∏—á–Ω–∞—è DNS –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ REST API"""
    try:
        # –û—á–∏—â–∞–µ–º URL –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        clean_target = target
        if target.startswith(("http://", "https://")):
            clean_target = target.replace("https://", "").replace("http://", "").split("/")[0]
        
        payload = {
            "type": "dns",
            "target": clean_target,
            "locations": [{"magic": "EU"}],
            "limit": 2,
            "measurementOptions": {"query": {"type": "A"}}
        }
        
        response = requests.post("https://api.globalping.io/v1/measurements", json=payload, timeout=10)
        if response.status_code != 202:
            return f"‚ùå **–û—à–∏–±–∫–∞ dns**: HTTP {response.status_code}"
        
        measurement_id = response.json().get("id")
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        for _ in range(15):
            time.sleep(1)
            result_response = requests.get(f"https://api.globalping.io/v1/measurements/{measurement_id}", timeout=10)
            if result_response.status_code == 200:
                data = result_response.json()
                if data.get("status") == "finished":
                    results = []
                    for result in data.get("results", []):
                        probe = result.get("probe", {})
                        location = f"{probe.get('city', 'Unknown')}, {probe.get('country', 'Unknown')}"
                        dns_result = result.get("result", {})
                        answers = dns_result.get("answers", [])
                        if answers:
                            ip = answers[0].get("value", "N/A")
                            results.append(f"üìç {location}: {ip}")
                    return f"üåç **Globalping DNS** –¥–ª—è `{clean_target}`:\n" + "\n".join(results)
        return "‚ùå **–û—à–∏–±–∫–∞ dns**: Timeout"
    except Exception as e:
        return f"‚ùå **–û—à–∏–±–∫–∞ dns**: {str(e)}"

def public_traceroute_check(target: str) -> str:
    """–ü—É–±–ª–∏—á–Ω–∞—è traceroute –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ REST API"""
    try:
        # –û—á–∏—â–∞–µ–º URL –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        clean_target = target
        if target.startswith(("http://", "https://")):
            clean_target = target.replace("https://", "").replace("http://", "").split("/")[0]
        
        payload = {
            "type": "traceroute",
            "target": clean_target,
            "locations": [{"magic": "EU"}],
            "limit": 2
        }
        
        response = requests.post("https://api.globalping.io/v1/measurements", json=payload, timeout=10)
        if response.status_code != 202:
            return f"‚ùå **–û—à–∏–±–∫–∞ traceroute**: HTTP {response.status_code}"
        
        measurement_id = response.json().get("id")
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        for _ in range(15):
            time.sleep(1)
            result_response = requests.get(f"https://api.globalping.io/v1/measurements/{measurement_id}", timeout=10)
            if result_response.status_code == 200:
                data = result_response.json()
                if data.get("status") == "finished":
                    results = []
                    for result in data.get("results", []):
                        probe = result.get("probe", {})
                        location = f"{probe.get('city', 'Unknown')}, {probe.get('country', 'Unknown')}"
                        trace_result = result.get("result", {})
                        hops = trace_result.get("hops", [])
                        hop_count = len(hops)
                        last_hop = hops[-1] if hops else {}
                        last_time = last_hop.get("timings", [{}])[-1].get("rtt", "N/A") if last_hop else "N/A"
                        results.append(f"üìç {location}: {hop_count} –ø—Ä—ã–∂–∫–æ–≤, –ø–æ—Å–ª–µ–¥–Ω–∏–π {last_time}ms")
                    return f"üåç **Globalping TRACEROUTE** –¥–ª—è `{clean_target}`:\n" + "\n".join(results)
        return "‚ùå **–û—à–∏–±–∫–∞ traceroute**: Timeout"
    except Exception as e:
        return f"‚ùå **–û—à–∏–±–∫–∞ traceroute**: {str(e)}"

def public_ping_check(target: str) -> str:
    """–ü—É–±–ª–∏—á–Ω–∞—è ping –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ REST API"""
    try:
        # –û—á–∏—â–∞–µ–º URL –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        clean_target = target
        if target.startswith(("http://", "https://")):
            clean_target = target.replace("https://", "").replace("http://", "").split("/")[0]
        
        payload = {
            "type": "ping",
            "target": clean_target,
            "locations": [{"magic": "EU"}],
            "limit": 2,
            "measurementOptions": {"packets": 3}
        }
        
        response = requests.post("https://api.globalping.io/v1/measurements", json=payload, timeout=10)
        if response.status_code != 202:
            return f"‚ùå **–û—à–∏–±–∫–∞ ping**: HTTP {response.status_code}"
        
        measurement_id = response.json().get("id")
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        for _ in range(15):
            time.sleep(1)
            result_response = requests.get(f"https://api.globalping.io/v1/measurements/{measurement_id}", timeout=10)
            if result_response.status_code == 200:
                data = result_response.json()
                if data.get("status") == "finished":
                    results = []
                    for result in data.get("results", []):
                        probe = result.get("probe", {})
                        location = f"{probe.get('city', 'Unknown')}, {probe.get('country', 'Unknown')}"
                        stats = result.get("result", {}).get("stats", {})
                        avg_time = stats.get("avg", "N/A")
                        packet_loss = stats.get("loss", "N/A")
                        results.append(f"üìç {location}: {avg_time}ms (–ø–æ—Ç–µ—Ä—å: {packet_loss}%)")
                    return f"üåç **Globalping PING** –¥–ª—è `{clean_target}`:\n" + "\n".join(results)
        return "‚ùå **–û—à–∏–±–∫–∞ ping**: Timeout"
    except Exception as e:
        return f"‚ùå **–û—à–∏–±–∫–∞ ping**: {str(e)}"

def public_http_check(target: str) -> str:
    """–ü—É–±–ª–∏—á–Ω–∞—è HTTP –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ REST API"""
    try:
        # –û—á–∏—â–∞–µ–º URL –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–ª—è HTTP —Ç–µ—Å—Ç–æ–≤
        clean_target = target
        if target.startswith(("http://", "https://")):
            clean_target = target.replace("https://", "").replace("http://", "").split("/")[0]
        
        payload = {
            "type": "http",
            "target": clean_target,
            "locations": [{"magic": "EU"}],
            "limit": 2
        }
        
        response = requests.post("https://api.globalping.io/v1/measurements", json=payload, timeout=10)
        if response.status_code != 202:
            return f"‚ùå **–û—à–∏–±–∫–∞ http**: HTTP {response.status_code}"
        
        measurement_id = response.json().get("id")
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        for _ in range(15):
            time.sleep(1)
            result_response = requests.get(f"https://api.globalping.io/v1/measurements/{measurement_id}", timeout=10)
            if result_response.status_code == 200:
                data = result_response.json()
                if data.get("status") == "finished":
                    results = []
                    for result in data.get("results", []):
                        probe = result.get("probe", {})
                        location = f"{probe.get('city', 'Unknown')}, {probe.get('country', 'Unknown')}"
                        http_result = result.get("result", {})
                        status = http_result.get("status", "N/A")
                        total_time = http_result.get("timings", {}).get("total", "N/A")
                        results.append(f"üìç {location}: HTTP {status} ({total_time}ms)")
                    return f"üåç **Globalping HTTP** –¥–ª—è `{clean_target}`:\n" + "\n".join(results)
        return "‚ùå **–û—à–∏–±–∫–∞ http**: Timeout"
    except Exception as e:
        return f"‚ùå **–û—à–∏–±–∫–∞ http**: {str(e)}"

# –§—É–Ω–∫—Ü–∏—è –æ–±—â–µ–Ω–∏—è —Å OpenAI API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑ –∏ –∫–æ–º–∞–Ω–¥
def ai_diagnose_issue(target):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—ã–π –¥–æ–º–µ–Ω –±–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥
    clean_domain = target.replace("https://", "").replace("http://", "").split("/")[0]
    
    prompt = f"""
    –†–µ—Å—É—Ä—Å '{target}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–æ–≤–µ–¥–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É.

    –°–¢–†–û–ì–û —Å–ª–µ–¥—É–π —Ñ–æ—Ä–º–∞—Ç—É:

    –ì–∏–ø–æ—Ç–µ–∑–∞: –ü—Ä–æ–±–ª–µ–º—ã —Å DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
    –ö–æ–º–∞–Ω–¥–∞: nslookup {clean_domain}
    MCP: dns

    –ì–∏–ø–æ—Ç–µ–∑–∞: –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç—å—é
    –ö–æ–º–∞–Ω–¥–∞: ping {clean_domain}
    MCP: ping

    –ì–∏–ø–æ—Ç–µ–∑–∞: –ü—Ä–æ–±–ª–µ–º—ã —Å HTTP –¥–æ—Å—Ç—É–ø–æ–º
    –ö–æ–º–∞–Ω–¥–∞: curl -I {target}
    MCP: http

    –ì–∏–ø–æ—Ç–µ–∑–∞: –ü—Ä–æ–±–ª–µ–º—ã —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π
    –ö–æ–º–∞–Ω–¥–∞: tracert {clean_domain}
    MCP: traceroute

    –ì–∏–ø–æ—Ç–µ–∑–∞: –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ—Ä—Ç–∞–º–∏
    –ö–æ–º–∞–Ω–¥–∞: telnet {clean_domain} 80
    MCP: ping

    –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–ß–ù–û —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç. –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ "MCP:" –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ: ping, http, traceroute –∏–ª–∏ dns.
    """

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=600,
        temperature=0.2
    )

    return response.choices[0].message.content.strip()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
def summarize_results(diagnostic, results):
    summary_prompt = f"""
    –î–∞–Ω—ã –≥–∏–ø–æ—Ç–µ–∑—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏:
    –ì–∏–ø–æ—Ç–µ–∑—ã –∏ –∫–æ–º–∞–Ω–¥—ã:
    {diagnostic}

    –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥:
    {results}

    –°–¥–µ–ª–∞–π –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–µ–∑—é–º–µ, —É–∫–∞–∂–∏ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø–∞–¥–µ–Ω–∏—è —Å–∞–π—Ç–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Ö —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é.
    """

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": summary_prompt}],
        max_tokens=500,
        temperature=0.2
    )

    return response.choices[0].message.content.strip()

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–ª–µ–π –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è Slack
def extract_targets(event):
    targets = []

    text = event.get('text', '')
    targets += re.findall(r"(\b(?:\d{1,3}\.){3}\d{1,3}\b|https?://[\w.-]+|\b[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b)", text)

    for file in event.get('files', []):
        plain_text = file.get('plain_text', '')
        targets += re.findall(r"(\b(?:\d{1,3}\.){3}\d{1,3}\b|https?://[\w.-]+|\b[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b)", plain_text)

    for attachment in event.get('attachments', []):
        for field in attachment.get('fields', []):
            field_value = field.get('value', '')
            targets += re.findall(r"(\b(?:\d{1,3}\.){3}\d{1,3}\b|https?://[\w.-]+|\b[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b)", field_value)

    return targets

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö Slack-—Å–æ–æ–±—â–µ–Ω–∏–π
@app.event("message")
def handle_message(event, say):
    bot_user_id = app.client.auth_test()["user_id"]
    if event.get('user') == bot_user_id:
        return

    targets = extract_targets(event)
    if not targets:
        return

    target = targets[0]
    thread_ts = event.get('ts')

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å Globalping –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    token_status = "üîë API Token" if GLOBALPING_API_TOKEN else "üåê Public Access"
    say(f"üîç **–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–±–ª–µ–º—É —Å —Ä–µ—Å—É—Ä—Å–æ–º:** `{target}`\n‚ö° _Globalping: {token_status} | Smart Fallback Strategy –∞–∫—Ç–∏–≤–Ω–∞_\nüåç _–ì–æ—Ç–æ–≤–ª—é –≥–ª–æ–±–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É..._", thread_ts=thread_ts)
    ai_response = ai_diagnose_issue(target)

    responses = []
    
    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –í–°–ï Globalping —Ç–µ—Å—Ç—ã
    mcp_matches = re.findall(r"MCP: (.+)", ai_response)
    globalping_tests_performed = set()  # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    unique_tests = set()
    for mcp_match in mcp_matches:
        test_type = mcp_match.strip().lower()
        if test_type in ["ping", "http", "traceroute", "dns"]:
            unique_tests.add(test_type)
    
    if unique_tests:
        test_list = ", ".join(unique_tests)
        say(f"üöÄ **–ó–∞–ø—É—Å–∫–∞—é {len(unique_tests)} Globalping —Ç–µ—Å—Ç(–æ–≤):** {test_list}\n‚è≥ _–ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –º–∏—Ä–∞..._", thread_ts=thread_ts)
    
    for mcp_match in mcp_matches:
        test_type = mcp_match.strip().lower()
        if test_type in ["ping", "http", "traceroute", "dns"] and test_type not in globalping_tests_performed:
            globalping_tests_performed.add(test_type)
            hybrid_result = globalping_hybrid_check(target, test_type=test_type)
            responses.append(f"**üåç Globalping {test_type.upper()} —Ç–µ—Å—Ç:**\n{hybrid_result}")

    # –ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    for match in re.findall(r"–ö–æ–º–∞–Ω–¥–∞: (.+)", ai_response):
        clean_command = match.strip("` ")
        output = run_command(clean_command)
        responses.append(f"**üíª –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞** `{clean_command}`:\n```{output}```")

    results_text = "\n".join(responses)
    summary = summarize_results(ai_response, results_text)

    response_text = f"*AI –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:*\n```{ai_response}```\n\n*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫:*\n{results_text}\n\n*–ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ–∑—é–º–µ:*\n```{summary}```"
    say(response_text, thread_ts=thread_ts)

if __name__ == "__main__":
    handler = SocketModeHandler(app, SLACK_APP_TOKEN)
    handler.start()
