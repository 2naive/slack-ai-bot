import os
import json
import subprocess
import re
import requests
import asyncio
from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler
from dotenv import load_dotenv
from openai import OpenAI

load_dotenv()

SLACK_APP_TOKEN = os.getenv("SLACK_APP_TOKEN")
SLACK_BOT_TOKEN = os.getenv("SLACK_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

app = App(token=SLACK_BOT_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –ø–æ —Ç–∞–π–º–∞—É—Ç—É
def run_command(command):
    if command.strip().startswith("tracert"):
        parts = command.strip().split()
        target = parts[-1]
        command = f"tracert -d -h 5 -w 1000 {target}"

    try:
        proc = subprocess.Popen(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            shell=True,
            encoding='cp866',
            errors='replace'
        )
        try:
            stdout, stderr = proc.communicate(timeout=10)
        except subprocess.TimeoutExpired:
            proc.kill()
            return "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞."

        return stdout if proc.returncode == 0 else stderr

    except FileNotFoundError:
        return f"–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {command.split()[0]}"

# Globalping MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
def globalping_mcp_request(target, test_type="ping", locations="EU,NA,AS"):
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Globalping MCP Server –¥–ª—è AI-—É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö —Ç–µ—Å—Ç–æ–≤
    
    Args:
        target: URL –∏–ª–∏ IP –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        test_type: —Ç–∏–ø —Ç–µ—Å—Ç–∞ (ping, traceroute, dns, http, mtr)
        locations: –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Globalping MCP
        mcp_prompt = f"""
        –ò—Å–ø–æ–ª—å–∑—É–π Globalping MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ {target}.
        
        –í—ã–ø–æ–ª–Ω–∏ {test_type} —Ç–µ—Å—Ç –∏–∑ —Ä–µ–≥–∏–æ–Ω–æ–≤: {locations}
        
        –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
        1. –ò—Å–ø–æ–ª—å–∑—É–π ping –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        2. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π http –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–µ–±-—Ä–µ—Å—É—Ä—Å–æ–≤  
        3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π traceroute –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä—à—Ä—É—Ç–∞
        4. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        –¶–µ–ª—å: {target}
        –¢–∏–ø —Ç–µ—Å—Ç–∞: {test_type}
        –†–µ–≥–∏–æ–Ω—ã: {locations}
        """
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ MCP –∫–æ–º–∞–Ω–¥
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system", 
                    "content": """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–µ—Ç–µ–≤–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ. –£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ Globalping MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º:
                    - ping: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ –∑–∞–¥–µ—Ä–∂–∫–∏
                    - http: HTTP –∑–∞–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
                    - traceroute: –∞–Ω–∞–ª–∏–∑ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
                    - dns: DNS —Ä–µ–∑–æ–ª—é—Ü–∏—è
                    - locations: —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π
                    
                    –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç."""
                },
                {"role": "user", "content": mcp_prompt}
            ],
            max_tokens=800,
            temperature=0.1,
            tools=[
                {
                    "type": "function",
                    "function": {
                        "name": "globalping_ping",
                        "description": "–í—ã–ø–æ–ª–Ω–∏—Ç—å ping —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ Globalping",
                        "parameters": {
                            "type": "object",
                            "properties": {
                                "target": {"type": "string", "description": "–¶–µ–ª—å –¥–ª—è ping"},
                                "locations": {"type": "string", "description": "–õ–æ–∫–∞—Ü–∏–∏ (EU, NA, AS –∏ —Ç.–¥.)"}
                            },
                            "required": ["target"]
                        }
                    }
                },
                {
                    "type": "function", 
                    "function": {
                        "name": "globalping_http",
                        "description": "–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ Globalping",
                        "parameters": {
                            "type": "object",
                            "properties": {
                                "target": {"type": "string", "description": "URL –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–∞"},
                                "locations": {"type": "string", "description": "–õ–æ–∫–∞—Ü–∏–∏"}
                            },
                            "required": ["target"]
                        }
                    }
                }
            ],
            tool_choice="auto"
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Å tool calls
        if response.choices[0].message.tool_calls:
            results = []
            for tool_call in response.choices[0].message.tool_calls:
                tool_name = tool_call.function.name
                tool_args = json.loads(tool_call.function.arguments)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π Globalping —Ç–µ—Å—Ç
                if tool_name == "globalping_ping":
                    result = execute_globalping_test(tool_args["target"], "ping", 
                                                   tool_args.get("locations", "EU,NA,AS"))
                elif tool_name == "globalping_http":
                    result = execute_globalping_test(tool_args["target"], "http",
                                                   tool_args.get("locations", "EU,NA,AS"))
                
                results.append(f"**{tool_name.replace('globalping_', '').upper()} —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**\n{result}")
            
            return "\n\n".join(results)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç tool calls, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
            return response.choices[0].message.content
            
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {str(e)}"

def execute_globalping_test(target, test_type, locations):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ Globalping API"""
    try:
        clean_target = target.replace("https://", "").replace("http://", "").split("/")[0]
        
        if test_type == "http":
            test_target = target if target.startswith(("http://", "https://")) else f"http://{target}"
        else:
            test_target = clean_target
            
        # –°–æ–∑–¥–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ
        create_url = "https://api.globalping.io/v1/measurements"
        payload = {
            "type": test_type,
            "target": test_target,
            "locations": [{"magic": locations}],
            "measurementOptions": {"packets": 3} if test_type == "ping" else {}
        }
        
        headers = {"Content-Type": "application/json"}
        response = requests.post(create_url, json=payload, headers=headers, timeout=10)
        
        if response.status_code != 202:
            return f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}"
            
        measurement_data = response.json()
        measurement_id = measurement_data.get("id")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        import time
        for attempt in range(15):
            result_url = f"https://api.globalping.io/v1/measurements/{measurement_id}"
            result_response = requests.get(result_url, timeout=10)
            
            if result_response.status_code == 200:
                result_data = result_response.json()
                
                if result_data.get("status") == "finished":
                    return format_globalping_results(result_data, test_type, target)
                elif result_data.get("status") == "failed":
                    return f"‚ùå –¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω: {result_data.get('error', 'Unknown')}"
                    
            time.sleep(1)
            
        return "‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def format_globalping_results(result_data, test_type, target):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Globalping –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    results = []
    
    for result in result_data.get("results", []):
        probe = result.get("probe", {})
        location = f"{probe.get('city', 'Unknown')}, {probe.get('country', 'Unknown')}"
        
        if test_type == "ping":
            stats = result.get("result", {}).get("stats", {})
            avg_time = stats.get("avg", "N/A")
            packet_loss = stats.get("loss", "N/A")
            results.append(f"üìç {location}: {avg_time}ms (loss: {packet_loss}%)")
            
        elif test_type == "http":
            http_result = result.get("result", {})
            status = http_result.get("status", "N/A")
            total_time = http_result.get("timings", {}).get("total", "N/A")
            results.append(f"üìç {location}: HTTP {status} ({total_time}ms)")
    
    return f"üåç **Globalping {test_type.upper()}** –¥–ª—è `{target}`:\n" + "\n".join(results)

# –§—É–Ω–∫—Ü–∏—è –æ–±—â–µ–Ω–∏—è —Å OpenAI API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑ –∏ –∫–æ–º–∞–Ω–¥
def ai_diagnose_issue(target):
    prompt = f"""
    –°–∞–π—Ç –∏–ª–∏ —Ä–µ—Å—É—Ä—Å '{target}' —É–ø–∞–ª.

    –ü—Ä–µ–¥–ª–æ–∂–∏ –∫—Ä–∞—Ç–∫–∏–µ –≥–∏–ø–æ—Ç–µ–∑—ã –ø—Ä–∏—á–∏–Ω –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å–µ—Ç–µ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –î–õ–Ø WINDOWS –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ç–∏—Ö –≥–∏–ø–æ—Ç–µ–∑.
    –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: curl, tracert, nslookup, ping, telnet.

    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, –ø—Ä–µ–¥–ª–æ–∂–∏ Globalping MCP —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Å—É—Ä—Å–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –º–∏—Ä–∞.
    –î–æ—Å—Ç—É–ø–Ω—ã–µ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ping, http, traceroute, dns.

    –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
    –ì–∏–ø–æ—Ç–µ–∑–∞: <–æ–ø–∏—Å–∞–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑—ã>
    –ö–æ–º–∞–Ω–¥–∞: <–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏>
    MCP: <—Ç–∏–ø_—Ç–µ—Å—Ç–∞>
    """

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=600,
        temperature=0.2
    )

    return response.choices[0].message.content.strip()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
def summarize_results(diagnostic, results):
    summary_prompt = f"""
    –î–∞–Ω—ã –≥–∏–ø–æ—Ç–µ–∑—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏:
    –ì–∏–ø–æ—Ç–µ–∑—ã –∏ –∫–æ–º–∞–Ω–¥—ã:
    {diagnostic}

    –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥:
    {results}

    –°–¥–µ–ª–∞–π –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–µ–∑—é–º–µ, —É–∫–∞–∂–∏ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø–∞–¥–µ–Ω–∏—è —Å–∞–π—Ç–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Ö —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é.
    """

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": summary_prompt}],
        max_tokens=500,
        temperature=0.2
    )

    return response.choices[0].message.content.strip()

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–ª–µ–π –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è Slack
def extract_targets(event):
    targets = []

    text = event.get('text', '')
    targets += re.findall(r"(\b(?:\d{1,3}\.){3}\d{1,3}\b|https?://[\w.-]+|\b[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b)", text)

    for file in event.get('files', []):
        plain_text = file.get('plain_text', '')
        targets += re.findall(r"(\b(?:\d{1,3}\.){3}\d{1,3}\b|https?://[\w.-]+|\b[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b)", plain_text)

    for attachment in event.get('attachments', []):
        for field in attachment.get('fields', []):
            field_value = field.get('value', '')
            targets += re.findall(r"(\b(?:\d{1,3}\.){3}\d{1,3}\b|https?://[\w.-]+|\b[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b)", field_value)

    return targets

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö Slack-—Å–æ–æ–±—â–µ–Ω–∏–π
@app.event("message")
def handle_message(event, say):
    bot_user_id = app.client.auth_test()["user_id"]
    if event.get('user') == bot_user_id:
        return

    targets = extract_targets(event)
    if not targets:
        return

    target = targets[0]
    thread_ts = event.get('ts')

    say(f"üîç *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–±–ª–µ–º—É —Å —Ä–µ—Å—É—Ä—Å–æ–º:* `{target}`\n‚ö° _–ò—Å–ø–æ–ª—å–∑—É—è Globalping MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é..._", thread_ts=thread_ts)
    
    # AI –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    ai_response = ai_diagnose_issue(target)

    responses = []
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ MCP —Ç–µ—Å—Ç–æ–≤
    mcp_match = re.search(r"MCP: (.+)", ai_response)
    if mcp_match:
        test_type = mcp_match.group(1).strip().lower()
        if test_type in ["ping", "http", "traceroute", "dns"]:
            mcp_result = globalping_mcp_request(target, test_type=test_type)
            responses.append(f"üåç *Globalping MCP {test_type.upper()}:*\n{mcp_result}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    for match in re.findall(r"–ö–æ–º–∞–Ω–¥–∞: (.+)", ai_response):
        clean_command = match.strip("` ")
        output = run_command(clean_command)
        responses.append(f"üíª *–ö–æ–º–∞–Ω–¥–∞* `{clean_command}`:\n```{output}```")

    results_text = "\n\n".join(responses)
    summary = summarize_results(ai_response, results_text)

    response_text = f"""ü§ñ *AI –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:*
```{ai_response}```

{results_text}

üìã *–ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ–∑—é–º–µ:*
```{summary}```"""
    
    say(response_text, thread_ts=thread_ts)

if __name__ == "__main__":
    handler = SocketModeHandler(app, SLACK_APP_TOKEN)
    handler.start() 