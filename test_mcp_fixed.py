#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ Globalping MCP –∫–ª–∏–µ–Ω—Ç–∞
"""

from globalping_mcp_client import GlobalpingMCPClient
import requests
import json

def test_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ MCP —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    print("=" * 50)
    
    endpoints = [
        "https://mcp.globalping.dev/sse",
        "https://mcp.globalping.dev/api",
        "https://mcp.globalping.dev/rpc",
        "https://mcp.globalping.dev",
        "https://api.globalping.io/mcp"
    ]
    
    test_request = {
        "jsonrpc": "2.0",
        "id": 1,
        "method": "tools/list"
    }
    
    for endpoint in endpoints:
        print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {endpoint}")
        
        headers = {
            "Content-Type": "application/json",
            "Accept": "application/json",
            "User-Agent": "GlobalpingMCPClient/2.0"
        }
        
        try:
            response = requests.post(
                endpoint,
                json=test_request,
                headers=headers,
                timeout=10
            )
            
            print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                try:
                    result = response.json()
                    print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç!")
                    print(f"–î–∞–Ω–Ω—ã–µ: {json.dumps(result, indent=2)[:200]}...")
                except json.JSONDecodeError:
                    print("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ JSON")
                    print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {response.text[:200]}...")
                    
            elif response.status_code == 401:
                print("‚ùå 401 - –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
                
            elif response.status_code == 404:
                print("‚ùå 404 - –≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
            else:
                print(f"‚ùå {response.status_code} - {response.text[:100]}")
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
        
        print("-" * 30)

def test_mcp_initialize():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é MCP"""
    
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MCP...")
    print("=" * 50)
    
    init_request = {
        "jsonrpc": "2.0",
        "id": 0,
        "method": "initialize",
        "params": {
            "protocolVersion": "2024-11-05",
            "capabilities": {},
            "clientInfo": {
                "name": "GlobalpingMCPClient",
                "version": "2.0"
            }
        }
    }
    
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "User-Agent": "GlobalpingMCPClient/2.0"
    }
    
    try:
        response = requests.post(
            "https://mcp.globalping.dev/sse",
            json=init_request,
            headers=headers,
            timeout=10
        )
        
        print(f"–°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {response.status_code}")
        
        if response.status_code == 200:
            try:
                result = response.json()
                print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                print(f"Capabilities: {result.get('result', {}).get('capabilities', {})}")
                return True
            except json.JSONDecodeError:
                print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ JSON")
                return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {response.text[:200]}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return False

def test_fixed_mcp_client():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π MCP –∫–ª–∏–µ–Ω—Ç"""
    
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ MCP –∫–ª–∏–µ–Ω—Ç–∞...")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
    test_configs = [
        {"api_key": None, "name": "–ë–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"},
        {"api_key": "public", "name": "–° –ø—É–±–ª–∏—á–Ω—ã–º –∫–ª—é—á–æ–º"},
        {"api_key": "demo", "name": "–° –¥–µ–º–æ –∫–ª—é—á–æ–º"},
    ]
    
    for config in test_configs:
        print(f"\nüìã {config['name']}:")
        
        client = GlobalpingMCPClient(api_key=config["api_key"])
        
        # –¢–µ—Å—Ç ping
        result = client.ping("google.com", "EU")
        print(f"Ping —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result['success']}")
        
        if result['success']:
            print("‚úÖ MCP —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result['result'][:150]}...")
            
            # –ï—Å–ª–∏ ping —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º HTTP
            http_result = client.http("google.com", "EU")
            print(f"HTTP —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {http_result['success']}")
            if http_result['success']:
                print(f"HTTP –¥–∞–Ω–Ω—ã–µ: {http_result['result'][:150]}...")
            else:
                print(f"HTTP –æ—à–∏–±–∫–∞: {http_result['error']}")
            break
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    
    print("\n" + "="*50)

def test_alternative_methods():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MCP"""
    
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤...")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º GET –∑–∞–ø—Ä–æ—Å (–≤–æ–∑–º–æ–∂–Ω–æ –¥–ª—è SSE)
    try:
        response = requests.get(
            "https://mcp.globalping.dev/sse",
            headers={
                "Accept": "text/event-stream",
                "User-Agent": "GlobalpingMCPClient/2.0"
            },
            timeout=5
        )
        
        print(f"GET –∑–∞–ø—Ä–æ—Å: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ SSE —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!")
            print(f"Content-Type: {response.headers.get('content-type', 'Unknown')}")
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå GET –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω: {str(e)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
    try:
        response = requests.get("https://globalping.io", timeout=5)
        print(f"–ì–ª–∞–≤–Ω—ã–π —Å–∞–π—Ç Globalping: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ Globalping —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –ì–ª–∞–≤–Ω—ã–π —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")

if __name__ == "__main__":
    print("üß™ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ Globalping MCP")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoints
        test_endpoints()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        init_success = test_mcp_initialize()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
        test_fixed_mcp_client()
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        test_alternative_methods()
        
        print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüí° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞–∂—É—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ MCP —Å–µ—Ä–≤–µ—Ä")
        print("–ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ Globalping")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback
        traceback.print_exc() 